// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_bootcamp/test/helper/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bootcamp/src/core/data/model/failure_model.dart' as _i6;
import 'package:flutter_bootcamp/src/services/http_service.dart' as _i2;
import 'package:flutter_bootcamp/src/weather_feature/data/datasource/weather_datasource.dart'
    as _i4;
import 'package:flutter_bootcamp/src/weather_feature/data/model/weather_model.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHttpService_0 extends _i1.Fake implements _i2.HttpService {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [WeatherDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherDatasource extends _i1.Mock implements _i4.WeatherDatasource {
  MockWeatherDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpService get service =>
      (super.noSuchMethod(Invocation.getter(#service),
          returnValue: _FakeHttpService_0()) as _i2.HttpService);
  @override
  _i5.Future<_i3.Either<_i6.NetworkFailure, _i7.WeatherModel>> getWeather(
          {double? lat, dynamic long}) =>
      (super.noSuchMethod(
          Invocation.method(#getWeather, [], {#lat: lat, #long: long}),
          returnValue:
              Future<_i3.Either<_i6.NetworkFailure, _i7.WeatherModel>>.value(
                  _FakeEither_1<_i6.NetworkFailure, _i7.WeatherModel>())) as _i5
          .Future<_i3.Either<_i6.NetworkFailure, _i7.WeatherModel>>);
  @override
  _i5.Future<
      _i3.Either<_i6.NetworkFailure, List<_i7.WeatherModel>>> getWeatherForCities(
          {List<Map<String, double>>? locations}) =>
      (super.noSuchMethod(
          Invocation.method(#getWeatherForCities, [], {#locations: locations}),
          returnValue:
              Future<_i3.Either<_i6.NetworkFailure, List<_i7.WeatherModel>>>.value(
                  _FakeEither_1<_i6.NetworkFailure, List<_i7.WeatherModel>>())) as _i5
          .Future<_i3.Either<_i6.NetworkFailure, List<_i7.WeatherModel>>>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i2.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.NetworkFailure, _i7.WeatherModel>>
      getWeatherForCity({double? lat, double? long}) => (super.noSuchMethod(
          Invocation.method(#getWeatherForCity, [], {#lat: lat, #long: long}),
          returnValue:
              Future<_i3.Either<_i6.NetworkFailure, _i7.WeatherModel>>.value(
                  _FakeEither_1<_i6.NetworkFailure, _i7.WeatherModel>())) as _i5
          .Future<_i3.Either<_i6.NetworkFailure, _i7.WeatherModel>>);
  @override
  _i5.Future<
      _i3.Either<_i6.NetworkFailure, List<_i7.WeatherModel>>> getWeatherForCities(
          {List<Map<String, double>>? locations}) =>
      (super.noSuchMethod(
          Invocation.method(#getWeatherForCities, [], {#locations: locations}),
          returnValue:
              Future<_i3.Either<_i6.NetworkFailure, List<_i7.WeatherModel>>>.value(
                  _FakeEither_1<_i6.NetworkFailure, List<_i7.WeatherModel>>())) as _i5
          .Future<_i3.Either<_i6.NetworkFailure, List<_i7.WeatherModel>>>);
}
