// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_bootcamp/test/src/news_feature/domain/usecase/get_weathers_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_bootcamp/src/core/data/model/failure_model.dart' as _i5;
import 'package:flutter_bootcamp/src/weather_feature/domain/entity/weather_entity.dart'
    as _i6;
import 'package:flutter_bootcamp/src/weather_feature/domain/repository/weather_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [WeatherRepositroy].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepositroy extends _i1.Mock implements _i3.WeatherRepositroy {
  MockWeatherRepositroy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.NetworkFailure, _i6.WeatherEntity>> getWeatherStats(
          {double? lat, double? long}) =>
      (super.noSuchMethod(
              Invocation.method(#getWeatherStats, [], {#lat: lat, #long: long}),
              returnValue: Future<
                      _i2.Either<_i5.NetworkFailure, _i6.WeatherEntity>>.value(
                  _FakeEither_0<_i5.NetworkFailure, _i6.WeatherEntity>()))
          as _i4.Future<_i2.Either<_i5.NetworkFailure, _i6.WeatherEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.NetworkFailure, List<_i6.WeatherEntity>>>
      getWeathersStats({List<Map<String, double>>? locations}) =>
          (super.noSuchMethod(
              Invocation.method(#getWeathersStats, [], {#locations: locations}),
              returnValue:
                  Future<_i2.Either<_i5.NetworkFailure, List<_i6.WeatherEntity>>>.value(
                      _FakeEither_0<_i5.NetworkFailure,
                          List<_i6.WeatherEntity>>())) as _i4
              .Future<_i2.Either<_i5.NetworkFailure, List<_i6.WeatherEntity>>>);
}
